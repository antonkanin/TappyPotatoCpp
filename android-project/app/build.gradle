def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion 26

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def sdl2SrcDir = properties.getProperty('sdl2_src.dir') ?: "add sdl2_src.dir in local.properties"
    def freeTypeSrcDir = properties.getProperty('freetype_src.dir') ?: "add freetype_src.dir in local.properties"

    defaultConfig {
        if (buildAsApplication) {
            applicationId "org.libsdl.app"
        }
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        setProperty("archivesBaseName", "TappyPotatoCpp")
        externalNativeBuild {
             cmake {
                 arguments "-DANDROID_STL=c++_static"
                 arguments "-DSDL2_SRC_DIR=" + sdl2SrcDir
                 arguments "-DANDROID_BUILD=ON"
                 arguments "-DFREETYPE_SRC_DIR=" + freeTypeSrcDir

                 abiFilters 'armeabi-v7a'
                 abiFilters 'arm64-v8a'
                 abiFilters 'x86'
//                 abiFilters 'x86_64'
             }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
             cmake {
                 path '../../CMakeLists.txt'
             }
        }
       
    }
    lintOptions {
        abortOnError false
    }
    
    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
